/**
 * Created by coolbong on 2015-06-04.
 */

var rsa = require('../lib/rsa');
var assert = require('assert');

exports.rsa = {
    'public key encryption 1' : function(){
        var m = new Buffer('98F0C770F23864C2E766DF02D1E833DFF4FFE92D696E1642F0A88C5694C6479D16DB1537BFE29E4FDC6E6E8AFD1B0EB7EA0124723C333179BF19E93F10658B2F776E829E87DAEDA9C94A8B3382199A350C077977C97AFF08FD11310AC950A72C3CA5002EF513FCCC286E646E3C5387535D509514B3B326E1234F9CB48C36DDD44B416D23654034A66F403BA511C5EFA3', 'hex');
        var e = new Buffer('03', 'hex');

        var text = new Buffer('21EC0FC6E1810DFEEA26545127494B40F5F12FA8670877C4B47516BBCD67EDF5F0652B437B4D3E4E83999E7B8245E2A18A7968E7C3E1C16B5609036E65E0F4AF2C4383AF19F1679DD59726C5D315B21967F5A3E526E645724B61F4C8ABCE98BEB8DF1FD64237DBE356B1F96C73EBA3206AAA4C818518E58E17F0E4265A0A5D7E2196E983C6DA78FC5C73F64E6F3AFF5A', 'hex');
        var answer = new Buffer('6A0254133390122000000101019001A078BEB21E7BEE9F85F18E15F1ABB842556A33F84390236605C57C9AAA8127CC7E9C33FBF81894BBA0F53C7D1DE61D64E7C061F1689B1B21D91F0E10A5FD9AB0FCDFC06B5D860968F34D1D04FF6770E533661196B45F219500C9B10B18B71A1464BF6B673C19D432FCB8AB4419EDCC2AE17A4472643A56D1AD98F2910DE3E1B8BC', 'hex');

        var result = rsa.public_encrypt(m, e, text);

        assert(answer.toString('hex') == result.toString('hex'));

        //step 1. public key modulus and certificate have same length
        assert(m.length == text.length);

        //step 2. result data trailer is equal to 0xBC
        assert(result[result.length-1] == 0xBC);

        //step 3. result data header is equal to 0x6A
        assert(result[0] == 0x6A);

        //step 4. result data format is equal to 0x02
        assert(result[1] == 0x02);
    }

};